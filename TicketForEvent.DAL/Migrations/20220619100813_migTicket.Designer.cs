// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketForEvent.DAL.Context;

#nullable disable

namespace TicketForEvent.DAL.Migrations
{
    [DbContext(typeof(TicketForEventDbContext))]
    [Migration("20220619100813_migTicket")]
    partial class migTicket
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("TicketForEvent.DAL.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CountryID")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryID");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Explanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("SalonId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TownshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TownshipId");

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.OpenAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<int>("StreetId")
                        .HasColumnType("int");

                    b.Property<int>("TownshipId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CountryId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("StreetId");

                    b.HasIndex("TownshipId");

                    b.ToTable("OpenAddresses");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Salon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenAddresId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OpenAddresId");

                    b.ToTable("Salons");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.SalonSeat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SalonId")
                        .HasColumnType("int");

                    b.Property<int>("SeatId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalonId");

                    b.HasIndex("SeatId");

                    b.ToTable("SalonSeats");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Seat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SeatNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SeatPrice")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Street", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("Streets");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Township", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("MDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Townships");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.City", b =>
                {
                    b.HasOne("TicketForEvent.DAL.Entities.Country", "CountryFK")
                        .WithMany("Cities")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CountryFK");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Event", b =>
                {
                    b.HasOne("TicketForEvent.DAL.Entities.EventType", "EventTypeFK")
                        .WithMany("Events")
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketForEvent.DAL.Entities.Salon", "SalonFK")
                        .WithMany("Events")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventTypeFK");

                    b.Navigation("SalonFK");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Neighborhood", b =>
                {
                    b.HasOne("TicketForEvent.DAL.Entities.Township", "TownshipFK")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("TownshipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TownshipFK");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.OpenAddress", b =>
                {
                    b.HasOne("TicketForEvent.DAL.Entities.City", "CityFK")
                        .WithMany("OpenAddresses")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketForEvent.DAL.Entities.Country", "CountryFK")
                        .WithMany("OpenAddresses")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TicketForEvent.DAL.Entities.Neighborhood", "NeighborhoodFK")
                        .WithMany("OpenAddresses")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TicketForEvent.DAL.Entities.Street", "StreetFK")
                        .WithMany("OpenAddresses")
                        .HasForeignKey("StreetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TicketForEvent.DAL.Entities.Township", "TownshipFK")
                        .WithMany("OpenAddresses")
                        .HasForeignKey("TownshipId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CityFK");

                    b.Navigation("CountryFK");

                    b.Navigation("NeighborhoodFK");

                    b.Navigation("StreetFK");

                    b.Navigation("TownshipFK");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Salon", b =>
                {
                    b.HasOne("TicketForEvent.DAL.Entities.OpenAddress", "OpenAddressFK")
                        .WithMany("Salons")
                        .HasForeignKey("OpenAddresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OpenAddressFK");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.SalonSeat", b =>
                {
                    b.HasOne("TicketForEvent.DAL.Entities.Salon", "SalonFK")
                        .WithMany("SalonSeats")
                        .HasForeignKey("SalonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketForEvent.DAL.Entities.Seat", "SeatFK")
                        .WithMany("SalonSeats")
                        .HasForeignKey("SeatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalonFK");

                    b.Navigation("SeatFK");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Street", b =>
                {
                    b.HasOne("TicketForEvent.DAL.Entities.Neighborhood", "NeighborhoodFK")
                        .WithMany("Streets")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NeighborhoodFK");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Township", b =>
                {
                    b.HasOne("TicketForEvent.DAL.Entities.City", "CityFK")
                        .WithMany("Townships")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityFK");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.City", b =>
                {
                    b.Navigation("OpenAddresses");

                    b.Navigation("Townships");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("OpenAddresses");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.EventType", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Neighborhood", b =>
                {
                    b.Navigation("OpenAddresses");

                    b.Navigation("Streets");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.OpenAddress", b =>
                {
                    b.Navigation("Salons");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Salon", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("SalonSeats");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Seat", b =>
                {
                    b.Navigation("SalonSeats");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Street", b =>
                {
                    b.Navigation("OpenAddresses");
                });

            modelBuilder.Entity("TicketForEvent.DAL.Entities.Township", b =>
                {
                    b.Navigation("Neighborhoods");

                    b.Navigation("OpenAddresses");
                });
#pragma warning restore 612, 618
        }
    }
}
